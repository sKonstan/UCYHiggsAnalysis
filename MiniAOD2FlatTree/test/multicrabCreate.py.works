#!/usr/bin/env python
'''
Usage: 
multicrabcreate.py [multicrab-dir-to-be-resubmitted]

Description:
This script is used to launch multicrab jobs, with certain customisable options.
The file datasets.py is used an an auxiliary file to determine the samples to be processesed.
Launching the command with a multicrab-dir as a parameter:

[username@lxplus0036:test]$ multicrabcreate.py multicrab-dir-to-be-resubmitted

resubmits some crab tasks within the multicrab dir. 
'''

#================================================================================================
# Import modules
#================================================================================================
import os
import re
import sys
import time
import UCYHiggsAnalysis.MiniAOD2FlatTree.tools.git as git

from datasets import *


#================================================================================================
# New Functions
#================================================================================================
def GetCmsswVersion():
    '''
    Get a command-line-friendly format of the CMSSW version currently use.
    https://docs.python.org/2/howto/regex.html
    '''

    # Get the current working directory
    pwd = os.getcwd()

    # Create a compliled regular expression object 
    cmssw_re = re.compile("/CMSSW_(?P<version>\S+?)/")

    # Scan through the string 'pwd' & look for any location where the compiled RE 'cmssw_re' matches
    match = cmssw_re.search(pwd)
    
    version = ""
    if match:
        # Return the string matched by the RE
        version = match.group("version")

        # Convert to desirable format
        version = version.replace("_","")
        version = version.replace("pre","p")
        version = version.replace("patch","p")
        
    return version
        
    
def GetSkimType(PSet):
    '''
    Get the skim type according to the name of the PSET file used.
    This will be used to setup the multicrab job accordingly.
    '''

    # Create a compliled regular expression object 
    skim_re = re.compile("runMiniAOD2FlatTree_(?P<skimType>\S+)Skim_cfg.py")
    
    # Scan through the string 'PSet' & look for any location where the compiled RE 'skim_re' matches 
    match = skim_re.search(PSet)

    skimType = ""
    if match:
        skimType = match.group("skimType")
    else:
        print "=== multicrabCreate.py:\n\t Could not determine the skim type for PSet \"%s\". EXIT." % (PSet)
        sys.exit()
        
    return skimType


def GetDatasetList(skimType):
    '''
    Get the list of datasets to be processed according to the skim type (and hance PSET file used).
    This will be used to setup the multicrab job accordingly.
    '''
    datasetList = []
    
    if skimType == "Default":
        datasetList.extend(datasetsMiniAODv2_WJets)
        #datasetList.extend(datasetsTauData)
    else:
        print "=== multicrabCreate.py:\n\t Unknown skim type '%s'." % (skimType), ". EXIT"
        sys.exit()

    return datasetList

    
def GetTaskDirName(datasetList, skimType, version):
    '''
    Get the name of the CRAB task directory to be created. For the user's benefit this
    will include the CMSSW uversion, the skim type and possibly important information from
    the dataset used, such as the bunch-crossing time.
    '''

    # Constuct basic task directory name
    taskDirName  = "multicrab"
    taskDirName += "_CMSSW" + version
    taskDirName += "_"  + skimType


    # Add dataset-specific info, like bunch-crossing 
    bx_re = re.compile("\S+(?P<bx>\d\dns)_\S+")
    match = bx_re.search(datasetList[0].URL)
    if match:
        taskDirName+= "_" + match.group("bx")

    # Append the creation time to the task directory name
    taskDirName+= "_" + time.strftime("%d%b%Y_%Hh%Mm%Ss")

    # Overwrite task dir name by user input? Check script execution command
    if len(sys.argv) == 2 and os.path.exists(sys.argv[1]) and os.path.isdir(sys.argv[1]):
        taskDirName = sys.argv[1]
    else:
        taskDirName = taskDirName
    
    return taskDirName


def CreateMulticrabDir(taskDirName):
    '''
    '''
    # If the task directory does not exist create it
    if not os.path.exists(taskDirName):
        os.mkdir(taskDirName)

    # Copy file to be used (and others to be tracked) to the task directory
    cmd = "cp %s %s" %(PSET, taskDirName)
    os.system(cmd)

    ### Write the commit id, "git status", "git diff" command output the directory created for the multicrab task.
    git.writeCodeGitInfo(taskDirName, True)
    
    return


def ExitPause(listToPrint):
    '''
    '''

    print "=== multicrabCreate.py:"
    for w in listToPrint:
        print "\t ", w
        
    keystroke = raw_input("Press anything but '0' to exit: ")
    if(keystroke != "0"):
        sys.exit(0)
    return


#================================================================================================
# Options & Declaration
#================================================================================================
PSET     = "runMiniAOD2FlatTree_DefaultSkim_cfg.py"
skimType = "Default"


# Get the CMSSW Version
version = GetCmsswVersion()
 
# Get the Skim type
skimType = GetSkimType(PSET)

# Get the datasets
datasetList = GetDatasetList(skimType)

# Get the task directory name
taskDirName = GetTaskDirName(datasetList, skimType, version)


# Create CRAB task diractory
#CreateMulticrabDir(taskDirName)

# Create CRAB configuration file for each dataset
CreateMulticrabCfgFiles()

crab_dataset_re     = re.compile("config.Data.inputDataset")
crab_requestName_re = re.compile("config.General.requestName")
crab_workArea_re    = re.compile("config.General.workArea")
crab_pset_re        = re.compile("config.JobType.psetName")
crab_psetParams_re  = re.compile("config.JobType.pyCfgParams")
crab_split_re       = re.compile("config.Data.splitting")# = 'FileBased'
crab_splitunits_re  = re.compile("config.Data.unitsPerJob")
crab_dbs_re         = re.compile("config.Data.inputDBS")


tune_re     = re.compile("(?P<name>\S+)_Tune")
tev_re      = re.compile("(?P<name>\S+)_13TeV")
runRange_re = re.compile("Cert_(?P<RunRange>\d+-\d+)_13TeV_PromptReco_Collisions15(?P<BunchSpacing>\S*)_JSON(?P<Silver>(_\S+|))\.")
datadataset_re = re.compile("^/(?P<name>\S+?)/(?P<run>Run\S+?)/")
mcdataset_re   = re.compile("^/(?P<name>\S+?)/")

# For-loop: All datasets
for dataset in datasetList:

    # Scan through the string 'dataset.URL' & look for any location where the compiled RE 'mcdataset_re' matches
    if dataset.isData():
	match = datadataset_re.search(dataset.URL)
    else:
        match = mcdataset_re.search(dataset.URL)

    # Sanity check
    if not match:
        raise Exception("Unexpected error for dataset '%s'. It must either be data or MC" %dataset)

    # 
    runAndDatasetName = match.group("name")
    if dataset.isData():
	runAndDatasetName+= "_"
	runAndDatasetName+= match.group("run")
    else:
        pass

    # Append the MC-tune (for MC samples only)
    tune_match = tune_re.search(runAndDatasetName)
    if tune_match:
	runAndDatasetName += tune_match.group("name")
    else:
        pass
        
    # Append the COM Energy (for MC samples only)
    tev_match = tev_re.search(runAndDatasetName)
    if tev_match:
        runAndDatasetName += tev_match.group("name")
    else:
        pass


    # Append the Run Range (for Data samples only)
    if dataset.isData():
	runRangeMatch = runRange_re.search(dataset.lumiMask)
	if runRangeMatch:
	    rr = runRangeMatch.group("RunRange")
	    rr = rr.replace("-","_")
	    bs = runRangeMatch.group("BunchSpacing")
	    runAndDatasetName += "_"+rr+bs
            Ag = runRangeMatch.group("Silver")
            if Ag == "_Silver":
                runAndDatasetName += Ag

        runAndDatasetName = runAndDatasetName.replace("-","_")
        
    outfilePath = os.path.join(taskDirName,"crabConfig_"+runAndDatasetName+".py")

    ExitPause([version, skimType, taskDirName, dataset.URL, runAndDatasetName, outfilePath])    

    
        
    if not os.path.exists(os.path.join(taskDirName,runAndDatasetName)):
        fIN  = open("crabConfig.py","r")
        fOUT = open(outfilePath,"w")

        # For-loop: All line in input fine
        for line in fIN:
            if line[0] == "#":
                continue
            match = crab_dataset_re.search(line)
            
            if match:
                line = "config.Data.inputDataset = '"+dataset.URL+"'\n"
            match = crab_requestName_re.search(line)
                
            if match:
                line = "config.General.requestName = '"+runAndDatasetName+"'\n"
            match = crab_workArea_re.search(line)
                
            if match:
                line = "config.General.workArea = '"+taskDirName+"'\n"
            match = crab_pset_re.search(line)
            
            if match:
                line = "config.JobType.psetName = '"+PSET+"'\n"
            match = crab_psetParams_re.search(line)

            if match:
                line = "config.JobType.pyCfgParams = ['dataVersion="+dataset.dataVersion+"']\n"
            match = crab_dbs_re.search(line)

            if match:
                line = "config.Data.inputDBS = '"+dataset.DBS+"'\n"

            if dataset.isData():
                match = crab_split_re.search(line)
                if match:
                    line = "config.Data.splitting = 'LumiBased'\n"
                    line+= "config.Data.lumiMask = '"+dataset.lumiMask+"'\n"
                match = crab_splitunits_re.search(line)	
                if match:
                    line = "config.Data.unitsPerJob = 100\n"

            fOUT.write(line)
            print "=== multicrabCreate.py:\n\t line = \"%s\"" % (line)
                
        # Close file
        fOUT.close()
        fIN.close()

        cmd = "crab submit -c " + outfilePath
        print "=== multicrabCreate.py:\n\t cmd = \"%s\"" % (cmd)

        cmd = "crab submit "+outfilePath
        os.system(cmd)
        print "=== multicrabCreate.py:\n\t cmd = \"%s\"" % (cmd)
            
        mv = "mv "+os.path.join(taskDirName,"crab_"+runAndDatasetName)+ " " + os.path.join(taskDirName,runAndDatasetNameg1
        )
        print "=== multicrabCreate.py:\n\t mv = \"%s\"" % (mv)
        os.system(mv)
            
